use core::dict::{Felt252Dict, Felt252DictTrait};
use crate::utils::traits::bytes::ToBytes;


#[derive(Clone, Debug, Serde, Destruct)]
pub struct ByteCodeLeWords {
    pub words64bit: Array<u64>,
    pub lastInputWord: u64,
    pub lastInputNumBytes: usize,
}

#[derive(Clone, Debug, Serde, Destruct)]
pub struct ByteCode {
    pub bytes: Span<u8>,
}

#[generate_trait]
pub impl OriginalByteCode of OriginalByteCodeTrait {
    fn get_original(self: ByteCodeLeWords) -> ByteCode {
        let mut bytes: Array<u8> = Default::default();

        for word in self.words64bit {
            //? It's actually big endian, but we're using little endian to flip little endian to be
            let word_bytes = word.to_le_bytes_padded();
            bytes.append_span(word_bytes);
        }

        //? It's actually big endian, but we're using little endian to flip little endian to be
        let last_input_word_bytes = self.lastInputWord.to_le_bytes_padded();
        for i in 0..self.lastInputNumBytes {
            let byte = last_input_word_bytes.at(i);
            bytes.append(*byte);
        }

        ByteCode { bytes: bytes.span() }
    }
}

#[generate_trait]
pub impl ByteCodeImpl of ByteCodeTrait {
    /// Initializes a dictionary of valid jump destinations in EVM bytecode.
    ///
    /// This function iterates over the bytecode from the current index 'i'.
    /// If the opcode at the current index is between 0x5f and 0x7f (PUSHN opcodes) (inclusive),
    /// it skips the next 'n_args' opcodes, where 'n_args' is the opcode minus 0x5f.
    /// If the opcode is 0x5b (JUMPDEST), it marks the current index as a valid jump destination.
    /// It continues by jumping back to the body flag until it has processed the entire bytecode.
    ///
    /// # Arguments
    /// * `bytecode` The bytecode to analyze
    ///
    /// # Returns
    /// A dictionary of valid jump destinations in the bytecode
    fn get_jumpdests(ref self: ByteCode) -> Felt252Dict<bool> {
        let bytecode = self.bytes;
        let mut jumpdests: Felt252Dict<bool> = Default::default();
        let mut i: usize = 0;
        while i < bytecode.len() {
            let opcode = *bytecode[i];
            // checking for PUSH opcode family
            if opcode >= 0x5f && opcode <= 0x7f {
                let n_args = opcode.into() - 0x5f;
                i += n_args + 1;
                continue;
            }

            if opcode == 0x5b {
                jumpdests.insert(i.into(), true);
            }

            i += 1;
        }
        jumpdests
    }
}

#[cfg(test)]
mod tests {
    mod bytecode_test {
        use super::super::{ByteCodeLeWords, OriginalByteCode};
        #[test]
        fn test_pack_bytes_ge_bytes31() {
            let bytecode = ByteCodeLeWords {
                words64bit: array![
                    0x3604605240608060, 0x350060575e006110, 0xda605c63801ce060, 0x638057430061111b,
                    0xa80061141bda605c, 0x147039288f638057, 0x51f8638057e60061, 0x61570601611440a4,
                    0x593663805b566d00, 0x805775006114e6cf, 0x00611486f21e4f63, 0x365b566d00615795,
                    0x616b0061576d0061, 0x00615b005b561b01, 0x80345b561b01616b, 0x8000605781006115,
                    0x00616b0061505bfd, 0x5695086104603690, 0x00615b563501615b, 0x61046036a300616b,
                    0x567f01615b56b008, 0x57b400611580345b, 0x0061505bfd800060, 0x40605b56f30161bd,
                    0xffffffffffff7351, 0xffffffffffffffff, 0x9190ffffffffffff, 0x4060012060528116,
                    0x345bf39003918051, 0x006057f200611580, 0x616b0061505bfd80, 0x9508610460360101,
                    0x345b563102615b56, 0x0060571201611580, 0x61bd0061505bfd80, 0x612301615b565e02,
                    0x613301615b56d402, 0x615b56ab03612e01, 0x01615b565b56b503, 0xff735b56d903613d,
                    0xffffffffffffffff, 0xffffffffffffffff, 0x0161033316ffffff, 0x4060817401615777,
                    0x5240600120608051, 0x0060505281006080, 0x5b56505b56190461, 0x5b561b0161740161,
                    0x5b56d90361870161, 0xffffffffffffff73, 0xffffffffffffffff, 0x033316ffffffffff,
                    0x83e6016157eb0161, 0x60011f6080808383, 0x0120600204918020, 0x4060018190514060,
                    0x8181909192938052, 0x8280838301206052, 0x9091019200603784, 0x6150920160505291,
                    0x505b565050911904, 0x61e601615b565050, 0x016100605b561b01, 0xff735b56d90361fd,
                    0xffffffffffffffff, 0xffffffffffffffff, 0x0261033316ffffff, 0xab03612102615726,
                    0x615b569050905b56, 0x905b561b01612e02, 0xd903613902615b56, 0xffffffffff735b56,
                    0xffffffffffffffff, 0x16ffffffffffffff, 0x0161577701610333, 0x605b564404618174,
                    0x56d9036168026100, 0xffffffffffff735b, 0xffffffffffffffff, 0x3316ffffffffffff,
                    0x2102615726026103, 0x6160605b56d90361, 0x805140608383b102, 0x6080524060016060,
                    0x0961012060528127, 0xa5046139912760c5, 0x5650505092935b56, 0xffffffffffff735b,
                    0xffffffffffffffff, 0x3b16ffffffffffff, 0xdc02615b56901515, 0xffff735b56d90361,
                    0xffffffffffffffff, 0xffffffffffffffff, 0x330161033316ffff, 0x79c3087f51406057,
                    0x00000000000000a0, 0x0000000000000000, 0x0000000000000000, 0x6052810000000000,
                    0x4260520182046020, 0x72547f5201822460, 0x6e65726170736e61, 0x6564617267705574,
                    0x786f7250656c6261, 0x44606d6461203a79, 0x63206e697f520182, 0x616620746f6e6e61,
                    0x74206b6361626c6c, 0x2079786f7270206f, 0x0182646067726174, 0x0000000074657f52,
                    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x6052018284600000,
                    0x91805140605b01a4, 0x026100605bfd9003, 0x60365b56cd056121, 0x6036800060378000,
                    0x8000603df45a8400, 0x57d403611580803e, 0x00603d5bf300603d, 0x2731b57f00605bfd,
                    0x13ae73318b564a68, 0x633e246e01a6f8b9, 0x17a7d67811eee8b6, 0x73545b03615d0b85,
                    0xffffffffffffffff, 0xffffffffffffffff, 0x50909116ffffffff, 0x0561832204615b56,
                    0x11518200605b56f5, 0x5b8050572f046180, 0x3e046157e6016115, 0x505b568c02618383,
                    0x647e7f5b56505050, 0x481ec0172f42794d, 0xeb31d388f5f4b594, 0x2d83ae423d6528fa,
                    0x04618f79c9389ec5, 0x40605b56d903616d, 0xffffffffff735180, 0xffffffffffffffff,
                    0x92ffffffffffffff, 0x6016849152811683, 0x5140600152018320, 0x740161a190039180,
                    0x60605b5642066181, 0xffffffffffffff73, 0xffffffffffffffff, 0x3b1684ffffffffff,
                    0x7f514060574b0561, 0x00000000a079c308, 0x0000000000000000, 0x0000000000000000,
                    0x0000000000000000, 0x0182046020605281, 0x5201822460266052, 0x737365726464417f,
                    0x6167656c6564203a, 0x206c6c6163206574, 0x632d6e6f6e206f74, 0x6e7f52018244606f,
                    0x0000007463617274, 0x0000000000000000, 0x0000000000000000, 0x6000000000000000,
                    0x6101846052018264, 0x858000605b56a203, 0xffffffffffffff73, 0xffffffffffffffff,
                    0x608516ffffffffff, 0x6190917305615140, 0x406000605b565709, 0xf45a858103838051,
                    0x810060803d505091, 0x51406057ae056114, 0x3d3f60191f605091, 0x3d52406001821601,
                    0x84206000603d5282, 0x605b56b305613e01, 0x915091505b509160, 0x61868282c3056150,
                    0x505095965b564e07, 0x00605b5650505050, 0xa3a13ba19408367f, 0xb92d4928c8670621,
                    0x3537cc76203eca8d, 0x2b385d50caa320a9, 0x05615b56fd0361bc, 0x605b56a1076181fe,
                    0xffffffffff735140, 0xffffffffffffffff, 0x82ffffffffffffff, 0x205ad77cbc7f9016,
                    0x20b3bade9afd27ee, 0xff6bbc4d2155f741, 0x2eda395b22c00ca9, 0xa2900060903b2d5c,
                    0xffffffff735b5650, 0xffffffffffffffff, 0xffffffffffffffff, 0x406057e506611681,
                    0x0000a079c3087f51, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
                    0x0460206052810000, 0x8224602660520182, 0x39314352457f5201, 0x2077656e203a3736,
                    0x7369206e696d6461, 0x72657a2065687420, 0x520182446061206f, 0x007373657264647f,
                    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x8460520182646000,
                    0x7f805b56a2036101, 0x318b564a682731b5, 0x6e01a6f8b913ae73, 0x7811eee8b6633e24,
                    0x03615d0b8517a7d6, 0xffffffff7f54805b, 0xffffffffffffffff, 0x0000000000000000,
                    0x0000000000000000, 0xffff731600000000, 0xffffffffffffffff, 0xffffffffffffffff,
                    0x909116929092ffff, 0x605b565055901791, 0x50575d0761158360, 0x51825b56b1026181,
                    0x805182576d076115, 0x60815bfd01206084, 0x00a079c3087f5140, 0x0000000000000000,
                    0x0000000000000000, 0x0000000000000000, 0x0104605281000000, 0x7309619091a20361,
                    0xffffffffff735b56, 0xffffffffffffffff, 0x81ffffffffffffff, 0x4060574508613b16,
                    0x0000a079c3087f51, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
                    0x0460206052810000, 0x8224602d60520182, 0x39314352457f5201, 0x2077656e203a3736,
                    0x6e656d656c706d69, 0x69206e6f69746174, 0x52018244606e2073, 0x6f63206120746f7f,
                    0x000074636172746e, 0x0000000000000000, 0x0000000000000000, 0x8460520182646000,
                    0x7f805b56a2036101, 0x21a3a13ba1940836, 0x8db92d4928c86706, 0xa93537cc76203eca,
                    0xbc2b385d50caa320, 0x7335805b56080761, 0xffffffffffffffff, 0xffffffffffffffff,
                    0x14811681ffffffff, 0xfd80006057900861, 0x00605b565090915b, 0x6115120384822060,
                    0x5bfd80006057a708, 0x566c086182b10261, 0x406000608000605b, 0xc508611512038684,
                    0x08615bfd80006057, 0x925b566c086184ce, 0xff67350184206050, 0x80ffffffffffffff,
                    0x6057eb0861151182, 0x910186815bfd8000, 0x611201831f608650, 0x5bfd80006057ff08,
                    0x0961151181813581, 0x875bfd800060570e, 0x1511010185822060, 0xfd80006057200961,
                    0x805094018320605b, 0x9250925050505093, 0x835b00605b569250, 0x81574e0961151081,
                    0x6052018283510181, 0x505b563609610120, 0x5b56520191006050, 0x8169096151820060,
                    0x3309610187206084, 0x9192019190915b56, 0x528120605b565050, 0x8420608051820060,
                    0x4060819209615201, 0x0961018720600185, 0xff7f011f605b5633, 0xffffffffffffffff,
                    0xffffffffffffffff, 0xffffffffffffffff, 0x16e0ffffffffffff, 0x9201406001919091,
                    0x646441fe56505091, 0x6f6c203a73736572, 0x206c6576656c2d77, 0x65746167656c6564,
                    0x6166206c6c616320, 0x706964a264656c69, 0x075f201222587366, 0xe7913de39056eb8e,
                    0x49b4a8f4c8180cb9, 0x3c00ee1f5d2885ac, 0x736477c839e2184e, 0x0010080043636c6f,
                ],
                lastInputWord: 0x0000000000000133,
                lastInputNumBytes: 0x1,
            };

            let bytecode_bytes: Span<u8> = array![
                0x60, 0x80, 0x60, 0x40, 0x52, 0x60, 0x04, 0x36, 0x10, 0x61, 0x00, 0x5e, 0x57, 0x60,
                0x00, 0x35, 0x60, 0xe0, 0x1c, 0x80, 0x63, 0x5c, 0x60, 0xda, 0x1b, 0x11, 0x61, 0x00,
                0x43, 0x57, 0x80, 0x63, 0x5c, 0x60, 0xda, 0x1b, 0x14, 0x61, 0x00, 0xa8, 0x57, 0x80,
                0x63, 0x8f, 0x28, 0x39, 0x70, 0x14, 0x61, 0x00, 0xe6, 0x57, 0x80, 0x63, 0xf8, 0x51,
                0xa4, 0x40, 0x14, 0x61, 0x01, 0x06, 0x57, 0x61, 0x00, 0x6d, 0x56, 0x5b, 0x80, 0x63,
                0x36, 0x59, 0xcf, 0xe6, 0x14, 0x61, 0x00, 0x75, 0x57, 0x80, 0x63, 0x4f, 0x1e, 0xf2,
                0x86, 0x14, 0x61, 0x00, 0x95, 0x57, 0x61, 0x00, 0x6d, 0x56, 0x5b, 0x36, 0x61, 0x00,
                0x6d, 0x57, 0x61, 0x00, 0x6b, 0x61, 0x01, 0x1b, 0x56, 0x5b, 0x00, 0x5b, 0x61, 0x00,
                0x6b, 0x61, 0x01, 0x1b, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x00, 0x81, 0x57, 0x60,
                0x00, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x00, 0x6b, 0x61, 0x00, 0x90, 0x36, 0x60, 0x04,
                0x61, 0x08, 0x95, 0x56, 0x5b, 0x61, 0x01, 0x35, 0x56, 0x5b, 0x61, 0x00, 0x6b, 0x61,
                0x00, 0xa3, 0x36, 0x60, 0x04, 0x61, 0x08, 0xb0, 0x56, 0x5b, 0x61, 0x01, 0x7f, 0x56,
                0x5b, 0x34, 0x80, 0x15, 0x61, 0x00, 0xb4, 0x57, 0x60, 0x00, 0x80, 0xfd, 0x5b, 0x50,
                0x61, 0x00, 0xbd, 0x61, 0x01, 0xf3, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x73, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x90, 0x91, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x40,
                0x51, 0x80, 0x91, 0x03, 0x90, 0xf3, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x00, 0xf2, 0x57,
                0x60, 0x00, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x00, 0x6b, 0x61, 0x01, 0x01, 0x36, 0x60,
                0x04, 0x61, 0x08, 0x95, 0x56, 0x5b, 0x61, 0x02, 0x31, 0x56, 0x5b, 0x34, 0x80, 0x15,
                0x61, 0x01, 0x12, 0x57, 0x60, 0x00, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x00, 0xbd, 0x61,
                0x02, 0x5e, 0x56, 0x5b, 0x61, 0x01, 0x23, 0x61, 0x02, 0xd4, 0x56, 0x5b, 0x61, 0x01,
                0x33, 0x61, 0x01, 0x2e, 0x61, 0x03, 0xab, 0x56, 0x5b, 0x61, 0x03, 0xb5, 0x56, 0x5b,
                0x56, 0x5b, 0x61, 0x01, 0x3d, 0x61, 0x03, 0xd9, 0x56, 0x5b, 0x73, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0x16, 0x33, 0x03, 0x61, 0x01, 0x77, 0x57, 0x61, 0x01, 0x74, 0x81,
                0x60, 0x40, 0x51, 0x80, 0x60, 0x20, 0x01, 0x60, 0x40, 0x52, 0x80, 0x60, 0x00, 0x81,
                0x52, 0x50, 0x60, 0x00, 0x61, 0x04, 0x19, 0x56, 0x5b, 0x50, 0x56, 0x5b, 0x61, 0x01,
                0x74, 0x61, 0x01, 0x1b, 0x56, 0x5b, 0x61, 0x01, 0x87, 0x61, 0x03, 0xd9, 0x56, 0x5b,
                0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x33, 0x03, 0x61, 0x01, 0xeb, 0x57,
                0x61, 0x01, 0xe6, 0x83, 0x83, 0x83, 0x80, 0x80, 0x60, 0x1f, 0x01, 0x60, 0x20, 0x80,
                0x91, 0x04, 0x02, 0x60, 0x20, 0x01, 0x60, 0x40, 0x51, 0x90, 0x81, 0x01, 0x60, 0x40,
                0x52, 0x80, 0x93, 0x92, 0x91, 0x90, 0x81, 0x81, 0x52, 0x60, 0x20, 0x01, 0x83, 0x83,
                0x80, 0x82, 0x84, 0x37, 0x60, 0x00, 0x92, 0x01, 0x91, 0x90, 0x91, 0x52, 0x50, 0x60,
                0x01, 0x92, 0x50, 0x61, 0x04, 0x19, 0x91, 0x50, 0x50, 0x56, 0x5b, 0x50, 0x50, 0x50,
                0x56, 0x5b, 0x61, 0x01, 0xe6, 0x61, 0x01, 0x1b, 0x56, 0x5b, 0x60, 0x00, 0x61, 0x01,
                0xfd, 0x61, 0x03, 0xd9, 0x56, 0x5b, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16,
                0x33, 0x03, 0x61, 0x02, 0x26, 0x57, 0x61, 0x02, 0x21, 0x61, 0x03, 0xab, 0x56, 0x5b,
                0x90, 0x50, 0x90, 0x56, 0x5b, 0x61, 0x02, 0x2e, 0x61, 0x01, 0x1b, 0x56, 0x5b, 0x90,
                0x56, 0x5b, 0x61, 0x02, 0x39, 0x61, 0x03, 0xd9, 0x56, 0x5b, 0x73, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0x16, 0x33, 0x03, 0x61, 0x01, 0x77, 0x57, 0x61, 0x01, 0x74, 0x81,
                0x61, 0x04, 0x44, 0x56, 0x5b, 0x60, 0x00, 0x61, 0x02, 0x68, 0x61, 0x03, 0xd9, 0x56,
                0x5b, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x33, 0x03, 0x61, 0x02, 0x26,
                0x57, 0x61, 0x02, 0x21, 0x61, 0x03, 0xd9, 0x56, 0x5b, 0x60, 0x60, 0x61, 0x02, 0xb1,
                0x83, 0x83, 0x60, 0x40, 0x51, 0x80, 0x60, 0x60, 0x01, 0x60, 0x40, 0x52, 0x80, 0x60,
                0x27, 0x81, 0x52, 0x60, 0x20, 0x01, 0x61, 0x09, 0xc5, 0x60, 0x27, 0x91, 0x39, 0x61,
                0x04, 0xa5, 0x56, 0x5b, 0x93, 0x92, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x73, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x16, 0x3b, 0x15, 0x15, 0x90, 0x56, 0x5b, 0x61, 0x02, 0xdc,
                0x61, 0x03, 0xd9, 0x56, 0x5b, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x33,
                0x03, 0x61, 0x01, 0x33, 0x57, 0x60, 0x40, 0x51, 0x7f, 0x08, 0xc3, 0x79, 0xa0, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81,
                0x52, 0x60, 0x20, 0x60, 0x04, 0x82, 0x01, 0x52, 0x60, 0x42, 0x60, 0x24, 0x82, 0x01,
                0x52, 0x7f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55,
                0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x78,
                0x79, 0x3a, 0x20, 0x61, 0x64, 0x6d, 0x60, 0x44, 0x82, 0x01, 0x52, 0x7f, 0x69, 0x6e,
                0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61,
                0x63, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x20, 0x74, 0x61,
                0x72, 0x67, 0x60, 0x64, 0x82, 0x01, 0x52, 0x7f, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x84,
                0x82, 0x01, 0x52, 0x60, 0xa4, 0x01, 0x5b, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90,
                0xfd, 0x5b, 0x60, 0x00, 0x61, 0x02, 0x21, 0x61, 0x05, 0xcd, 0x56, 0x5b, 0x36, 0x60,
                0x00, 0x80, 0x37, 0x60, 0x00, 0x80, 0x36, 0x60, 0x00, 0x84, 0x5a, 0xf4, 0x3d, 0x60,
                0x00, 0x80, 0x3e, 0x80, 0x80, 0x15, 0x61, 0x03, 0xd4, 0x57, 0x3d, 0x60, 0x00, 0xf3,
                0x5b, 0x3d, 0x60, 0x00, 0xfd, 0x5b, 0x60, 0x00, 0x7f, 0xb5, 0x31, 0x27, 0x68, 0x4a,
                0x56, 0x8b, 0x31, 0x73, 0xae, 0x13, 0xb9, 0xf8, 0xa6, 0x01, 0x6e, 0x24, 0x3e, 0x63,
                0xb6, 0xe8, 0xee, 0x11, 0x78, 0xd6, 0xa7, 0x17, 0x85, 0x0b, 0x5d, 0x61, 0x03, 0x5b,
                0x54, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x91, 0x90, 0x50, 0x56, 0x5b,
                0x61, 0x04, 0x22, 0x83, 0x61, 0x05, 0xf5, 0x56, 0x5b, 0x60, 0x00, 0x82, 0x51, 0x11,
                0x80, 0x61, 0x04, 0x2f, 0x57, 0x50, 0x80, 0x5b, 0x15, 0x61, 0x01, 0xe6, 0x57, 0x61,
                0x04, 0x3e, 0x83, 0x83, 0x61, 0x02, 0x8c, 0x56, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x56,
                0x5b, 0x7f, 0x7e, 0x64, 0x4d, 0x79, 0x42, 0x2f, 0x17, 0xc0, 0x1e, 0x48, 0x94, 0xb5,
                0xf4, 0xf5, 0x88, 0xd3, 0x31, 0xeb, 0xfa, 0x28, 0x65, 0x3d, 0x42, 0xae, 0x83, 0x2d,
                0xc5, 0x9e, 0x38, 0xc9, 0x79, 0x8f, 0x61, 0x04, 0x6d, 0x61, 0x03, 0xd9, 0x56, 0x5b,
                0x60, 0x40, 0x80, 0x51, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x92, 0x83, 0x16,
                0x81, 0x52, 0x91, 0x84, 0x16, 0x60, 0x20, 0x83, 0x01, 0x52, 0x01, 0x60, 0x40, 0x51,
                0x80, 0x91, 0x03, 0x90, 0xa1, 0x61, 0x01, 0x74, 0x81, 0x61, 0x06, 0x42, 0x56, 0x5b,
                0x60, 0x60, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x84, 0x16, 0x3b, 0x61, 0x05,
                0x4b, 0x57, 0x60, 0x40, 0x51, 0x7f, 0x08, 0xc3, 0x79, 0xa0, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x52, 0x60, 0x20,
                0x60, 0x04, 0x82, 0x01, 0x52, 0x60, 0x26, 0x60, 0x24, 0x82, 0x01, 0x52, 0x7f, 0x41,
                0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
                0x74, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x6e, 0x6f, 0x6e,
                0x2d, 0x63, 0x6f, 0x60, 0x44, 0x82, 0x01, 0x52, 0x7f, 0x6e, 0x74, 0x72, 0x61, 0x63,
                0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
                0x64, 0x82, 0x01, 0x52, 0x60, 0x84, 0x01, 0x61, 0x03, 0xa2, 0x56, 0x5b, 0x60, 0x00,
                0x80, 0x85, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x85, 0x60, 0x40, 0x51,
                0x61, 0x05, 0x73, 0x91, 0x90, 0x61, 0x09, 0x57, 0x56, 0x5b, 0x60, 0x00, 0x60, 0x40,
                0x51, 0x80, 0x83, 0x03, 0x81, 0x85, 0x5a, 0xf4, 0x91, 0x50, 0x50, 0x3d, 0x80, 0x60,
                0x00, 0x81, 0x14, 0x61, 0x05, 0xae, 0x57, 0x60, 0x40, 0x51, 0x91, 0x50, 0x60, 0x1f,
                0x19, 0x60, 0x3f, 0x3d, 0x01, 0x16, 0x82, 0x01, 0x60, 0x40, 0x52, 0x3d, 0x82, 0x52,
                0x3d, 0x60, 0x00, 0x60, 0x20, 0x84, 0x01, 0x3e, 0x61, 0x05, 0xb3, 0x56, 0x5b, 0x60,
                0x60, 0x91, 0x50, 0x5b, 0x50, 0x91, 0x50, 0x91, 0x50, 0x61, 0x05, 0xc3, 0x82, 0x82,
                0x86, 0x61, 0x07, 0x4e, 0x56, 0x5b, 0x96, 0x95, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50,
                0x56, 0x5b, 0x60, 0x00, 0x7f, 0x36, 0x08, 0x94, 0xa1, 0x3b, 0xa1, 0xa3, 0x21, 0x06,
                0x67, 0xc8, 0x28, 0x49, 0x2d, 0xb9, 0x8d, 0xca, 0x3e, 0x20, 0x76, 0xcc, 0x37, 0x35,
                0xa9, 0x20, 0xa3, 0xca, 0x50, 0x5d, 0x38, 0x2b, 0xbc, 0x61, 0x03, 0xfd, 0x56, 0x5b,
                0x61, 0x05, 0xfe, 0x81, 0x61, 0x07, 0xa1, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x73, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0x82, 0x16, 0x90, 0x7f, 0xbc, 0x7c, 0xd7, 0x5a, 0x20,
                0xee, 0x27, 0xfd, 0x9a, 0xde, 0xba, 0xb3, 0x20, 0x41, 0xf7, 0x55, 0x21, 0x4d, 0xbc,
                0x6b, 0xff, 0xa9, 0x0c, 0xc0, 0x22, 0x5b, 0x39, 0xda, 0x2e, 0x5c, 0x2d, 0x3b, 0x90,
                0x60, 0x00, 0x90, 0xa2, 0x50, 0x56, 0x5b, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0x81, 0x16, 0x61, 0x06, 0xe5, 0x57, 0x60, 0x40, 0x51, 0x7f, 0x08, 0xc3, 0x79, 0xa0,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x81, 0x52, 0x60, 0x20, 0x60, 0x04, 0x82, 0x01, 0x52, 0x60, 0x26, 0x60, 0x24, 0x82,
                0x01, 0x52, 0x7f, 0x45, 0x52, 0x43, 0x31, 0x39, 0x36, 0x37, 0x3a, 0x20, 0x6e, 0x65,
                0x77, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65,
                0x20, 0x7a, 0x65, 0x72, 0x6f, 0x20, 0x61, 0x60, 0x44, 0x82, 0x01, 0x52, 0x7f, 0x64,
                0x64, 0x72, 0x65, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x60, 0x64, 0x82, 0x01, 0x52, 0x60, 0x84, 0x01, 0x61, 0x03, 0xa2,
                0x56, 0x5b, 0x80, 0x7f, 0xb5, 0x31, 0x27, 0x68, 0x4a, 0x56, 0x8b, 0x31, 0x73, 0xae,
                0x13, 0xb9, 0xf8, 0xa6, 0x01, 0x6e, 0x24, 0x3e, 0x63, 0xb6, 0xe8, 0xee, 0x11, 0x78,
                0xd6, 0xa7, 0x17, 0x85, 0x0b, 0x5d, 0x61, 0x03, 0x5b, 0x80, 0x54, 0x7f, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x16, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x92, 0x90, 0x92, 0x16,
                0x91, 0x90, 0x91, 0x17, 0x90, 0x55, 0x50, 0x56, 0x5b, 0x60, 0x60, 0x83, 0x15, 0x61,
                0x07, 0x5d, 0x57, 0x50, 0x81, 0x61, 0x02, 0xb1, 0x56, 0x5b, 0x82, 0x51, 0x15, 0x61,
                0x07, 0x6d, 0x57, 0x82, 0x51, 0x80, 0x84, 0x60, 0x20, 0x01, 0xfd, 0x5b, 0x81, 0x60,
                0x40, 0x51, 0x7f, 0x08, 0xc3, 0x79, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x52, 0x60, 0x04, 0x01, 0x61, 0x03,
                0xa2, 0x91, 0x90, 0x61, 0x09, 0x73, 0x56, 0x5b, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0x81, 0x16, 0x3b, 0x61, 0x08, 0x45, 0x57, 0x60, 0x40, 0x51, 0x7f, 0x08, 0xc3,
                0x79, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x81, 0x52, 0x60, 0x20, 0x60, 0x04, 0x82, 0x01, 0x52, 0x60, 0x2d, 0x60,
                0x24, 0x82, 0x01, 0x52, 0x7f, 0x45, 0x52, 0x43, 0x31, 0x39, 0x36, 0x37, 0x3a, 0x20,
                0x6e, 0x65, 0x77, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
                0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x60, 0x44, 0x82, 0x01, 0x52,
                0x7f, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x64, 0x82, 0x01, 0x52, 0x60, 0x84, 0x01, 0x61,
                0x03, 0xa2, 0x56, 0x5b, 0x80, 0x7f, 0x36, 0x08, 0x94, 0xa1, 0x3b, 0xa1, 0xa3, 0x21,
                0x06, 0x67, 0xc8, 0x28, 0x49, 0x2d, 0xb9, 0x8d, 0xca, 0x3e, 0x20, 0x76, 0xcc, 0x37,
                0x35, 0xa9, 0x20, 0xa3, 0xca, 0x50, 0x5d, 0x38, 0x2b, 0xbc, 0x61, 0x07, 0x08, 0x56,
                0x5b, 0x80, 0x35, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x16, 0x81, 0x14,
                0x61, 0x08, 0x90, 0x57, 0x60, 0x00, 0x80, 0xfd, 0x5b, 0x91, 0x90, 0x50, 0x56, 0x5b,
                0x60, 0x00, 0x60, 0x20, 0x82, 0x84, 0x03, 0x12, 0x15, 0x61, 0x08, 0xa7, 0x57, 0x60,
                0x00, 0x80, 0xfd, 0x5b, 0x61, 0x02, 0xb1, 0x82, 0x61, 0x08, 0x6c, 0x56, 0x5b, 0x60,
                0x00, 0x80, 0x60, 0x00, 0x60, 0x40, 0x84, 0x86, 0x03, 0x12, 0x15, 0x61, 0x08, 0xc5,
                0x57, 0x60, 0x00, 0x80, 0xfd, 0x5b, 0x61, 0x08, 0xce, 0x84, 0x61, 0x08, 0x6c, 0x56,
                0x5b, 0x92, 0x50, 0x60, 0x20, 0x84, 0x01, 0x35, 0x67, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0x80, 0x82, 0x11, 0x15, 0x61, 0x08, 0xeb, 0x57, 0x60, 0x00, 0x80,
                0xfd, 0x5b, 0x81, 0x86, 0x01, 0x91, 0x50, 0x86, 0x60, 0x1f, 0x83, 0x01, 0x12, 0x61,
                0x08, 0xff, 0x57, 0x60, 0x00, 0x80, 0xfd, 0x5b, 0x81, 0x35, 0x81, 0x81, 0x11, 0x15,
                0x61, 0x09, 0x0e, 0x57, 0x60, 0x00, 0x80, 0xfd, 0x5b, 0x87, 0x60, 0x20, 0x82, 0x85,
                0x01, 0x01, 0x11, 0x15, 0x61, 0x09, 0x20, 0x57, 0x60, 0x00, 0x80, 0xfd, 0x5b, 0x60,
                0x20, 0x83, 0x01, 0x94, 0x50, 0x80, 0x93, 0x50, 0x50, 0x50, 0x50, 0x92, 0x50, 0x92,
                0x50, 0x92, 0x56, 0x5b, 0x60, 0x00, 0x5b, 0x83, 0x81, 0x10, 0x15, 0x61, 0x09, 0x4e,
                0x57, 0x81, 0x81, 0x01, 0x51, 0x83, 0x82, 0x01, 0x52, 0x60, 0x20, 0x01, 0x61, 0x09,
                0x36, 0x56, 0x5b, 0x50, 0x50, 0x60, 0x00, 0x91, 0x01, 0x52, 0x56, 0x5b, 0x60, 0x00,
                0x82, 0x51, 0x61, 0x09, 0x69, 0x81, 0x84, 0x60, 0x20, 0x87, 0x01, 0x61, 0x09, 0x33,
                0x56, 0x5b, 0x91, 0x90, 0x91, 0x01, 0x92, 0x91, 0x50, 0x50, 0x56, 0x5b, 0x60, 0x20,
                0x81, 0x52, 0x60, 0x00, 0x82, 0x51, 0x80, 0x60, 0x20, 0x84, 0x01, 0x52, 0x61, 0x09,
                0x92, 0x81, 0x60, 0x40, 0x85, 0x01, 0x60, 0x20, 0x87, 0x01, 0x61, 0x09, 0x33, 0x56,
                0x5b, 0x60, 0x1f, 0x01, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x16, 0x91, 0x90, 0x91, 0x01,
                0x60, 0x40, 0x01, 0x92, 0x91, 0x50, 0x50, 0x56, 0xfe, 0x41, 0x64, 0x64, 0x72, 0x65,
                0x73, 0x73, 0x3a, 0x20, 0x6c, 0x6f, 0x77, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20,
                0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20,
                0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0xa2, 0x64, 0x69, 0x70, 0x66, 0x73, 0x58, 0x22,
                0x12, 0x20, 0x5f, 0x07, 0x8e, 0xeb, 0x56, 0x90, 0xe3, 0x3d, 0x91, 0xe7, 0xb9, 0x0c,
                0x18, 0xc8, 0xf4, 0xa8, 0xb4, 0x49, 0xac, 0x85, 0x28, 0x5d, 0x1f, 0xee, 0x00, 0x3c,
                0x4e, 0x18, 0xe2, 0x39, 0xc8, 0x77, 0x64, 0x73, 0x6f, 0x6c, 0x63, 0x43, 0x00, 0x08,
                0x10, 0x00, 0x33,
            ]
                .span();

            let calculated_bytecode_bytes = bytecode.get_original().bytes;

            assert_eq!(calculated_bytecode_bytes, bytecode_bytes, "bytecode mismatch");
        }
    }
}
